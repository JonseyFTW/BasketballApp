// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(COACH)
  teamId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  plays       Play[]
  gamePlans   GamePlan[]
  team        Team?      @relation(fields: [teamId], references: [id])
  playersCoached PlayerProfile[] @relation("CoachPlayers")

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users   User[]
  players PlayerProfile[]

  @@map("teams")
}

model Play {
  id           String   @id @default(cuid())
  title        String
  description  String?
  diagramJSON  Json     // Stores the play diagram data (positions, movements, etc.)
  authorId     String
  shareToken   String?  @unique // For public sharing
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  author           User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags             PlayTag[]
  relationsFrom    PlayRelation[]      @relation("PrimaryPlay")
  relationsTo      PlayRelation[]      @relation("RelatedPlay")
  gamePlanItems    GamePlanItem[]
  adaptations      PlayAdaptation[]

  @@map("plays")
}

model PlayTag {
  id          String      @id @default(cuid())
  name        String      @unique
  category    TagCategory @default(TYPE)
  description String?
  color       String?     @default("#3B82F6") // Hex color for UI
  createdAt   DateTime    @default(now())

  // Relations
  plays Play[]

  @@map("play_tags")
}

model PlayRelation {
  id            String       @id @default(cuid())
  playId        String
  relatedPlayId String
  relationType  RelationType
  description   String? // Optional description of the relationship
  createdAt     DateTime     @default(now())

  // Relations
  play        Play @relation("PrimaryPlay", fields: [playId], references: [id], onDelete: Cascade)
  relatedPlay Play @relation("RelatedPlay", fields: [relatedPlayId], references: [id], onDelete: Cascade)

  @@unique([playId, relatedPlayId, relationType])
  @@map("play_relations")
}

model PlayerProfile {
  id         String   @id @default(cuid())
  name       String
  number     Int?
  position   String?
  teamId     String?
  coachId    String?
  attributes Json     // Store player attributes as JSON (speed, size, shooting, etc.)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  team           Team?            @relation(fields: [teamId], references: [id])
  coach          User?            @relation("CoachPlayers", fields: [coachId], references: [id])
  adaptations    PlayAdaptation[]

  @@map("player_profiles")
}

model PlayAdaptation {
  id              String   @id @default(cuid())
  playId          String
  playerProfileId String
  adaptedDiagram  Json     // The adapted diagram JSON
  adaptationNotes String?  // Notes about what was adapted and why
  createdAt       DateTime @default(now())

  // Relations
  play          Play          @relation(fields: [playId], references: [id], onDelete: Cascade)
  playerProfile PlayerProfile @relation(fields: [playerProfileId], references: [id], onDelete: Cascade)

  @@unique([playId, playerProfileId])
  @@map("play_adaptations")
}

model GamePlan {
  id           String   @id @default(cuid())
  title        String
  description  String?
  opponent     String?
  gameDate     DateTime?
  defenseType  String?  // e.g., "Zone", "Man", "Press"
  createdById  String
  shareToken   String?  @unique // For public sharing
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdBy User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  items     GamePlanItem[]
  sequences GamePlanSequence[]

  @@map("game_plans")
}

model GamePlanItem {
  id           String   @id @default(cuid())
  gamePlanId   String
  playId       String
  orderIndex   Int      @default(0)
  section      String?  // e.g., "vs Zone", "BLOB", "Endgame"
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  gamePlan GamePlan @relation(fields: [gamePlanId], references: [id], onDelete: Cascade)
  play     Play     @relation(fields: [playId], references: [id], onDelete: Cascade)

  @@unique([gamePlanId, playId])
  @@map("game_plan_items")
}

model GamePlanSequence {
  id           String  @id @default(cuid())
  gamePlanId   String
  fromPlayId   String
  toPlayId     String
  condition    String? // e.g., "if zone collapses", "counter option"
  label        String? // Label for the connection
  createdAt    DateTime @default(now())

  // Relations
  gamePlan GamePlan @relation(fields: [gamePlanId], references: [id], onDelete: Cascade)

  @@unique([gamePlanId, fromPlayId, toPlayId])
  @@map("game_plan_sequences")
}

// Enums
enum UserRole {
  COACH
  PLAYER
  ADMIN
}

enum TagCategory {
  TYPE      // Primary, Counter, Decoy
  SITUATION // BLOB, SLOB, Under5s, etc.
  DEFENSE   // vs Zone, vs Man, vs Press
  TEMPO     // FastBreak, HalfCourt, Delay
}

enum RelationType {
  COUNTER
  CONTINUATION
  DECOY
  SETUP
  ALTERNATIVE
}